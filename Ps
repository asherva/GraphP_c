מה הסקריפט עושה

מתחבר לכל שרת ברשימת $RemoteComputers באמצעות PowerShell Remoting

מוצא את קובץ הלוג האחרון של Hyper בכל שרת

יוצר FileSystemWatcher לכל קובץ – תגובה כמעט מיידית לשורה חדשה

כל פעם שמופיעה השגיאה "Address already in use":

מציג הודעה בזמן אמת למסוף עם שם השרת

כותב ל־CSV מרכזי ($OutputLogFile)

שומר בפרמטר פנימי $Global:PortConflicts

רץ ברצף עד עצירה ידנית (Ctrl+C)

יתרונות

מאפשר ניטור מרוכז של מספר שרתים

תגובה מהירה כמעט בזמן אמת לשגיאות

תיעוד מלא לשימוש לניתוחים מאוחרים

אין פגיעה בביצועי השרתים – קורא רק שורות חדשות

ניתן להוסיף התראה (מייל/טלגרם) בקלות בפונקציה -Action של FileSystemWatcher



param(
    [string[]]$RemoteComputers = @("Server1","Server2"),  # רשימת שרתים מרוחקים
    [string]$RemoteLogFolder = "C$\ProgramData\Tableau\Tableau Server\data\tabsvc\logs\hyper",
    [string]$OutputLogFile = "C:\Temp\HyperPortConflicts_AllServers.csv"
)

# משתנה גלובלי לשמירת כל ההתנגשויות
$Global:PortConflicts = @()

# פונקציה לקבלת הקובץ האחרון בשרת מרוחק
function Get-RemoteLatestLog {
    param($Computer, $Folder)
    $session = New-PSSession -ComputerName $Computer
    $log = Invoke-Command -Session $session -ScriptBlock {
        param($FolderRemote)
        Get-ChildItem -LiteralPath $FolderRemote -Filter "hyper_0_*.txt" |
        Sort-Object LastWriteTime -Descending |
        Select-Object -First 1
    } -ArgumentList $Folder
    Remove-PSSession $session
    return $log
}

# פונקציה לניטור Hyper על שרת מרוחק
function Monitor-HyperRemote {
    param($Computer, $LogPath, $OutputFile)
    
    Write-Host "🟢 ניטור Hyper בזמן אמת על $Computer: $($LogPath.Name)..."

    $session = New-PSSession -ComputerName $Computer
    Invoke-Command -Session $session -ScriptBlock {
        param($FullPath, $OutputFile)
        
        $fsw = New-Object System.IO.FileSystemWatcher
        $fsw.Path = Split-Path $FullPath
        $fsw.Filter = Split-Path $FullPath -Leaf
        $fsw.EnableRaisingEvents = $true
        $fsw.NotifyFilter = [System.IO.NotifyFilters]'LastWrite'

        Register-ObjectEvent $fsw Changed -Action {
            $lines = Get-Content $FullPath -Tail 5
            foreach ($line in $lines) {
                if ($line -match "Address already in use") {
                    $time = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                    $obj = [PSCustomObject]@{
                        Time    = $time
                        Server  = $env:COMPUTERNAME
                        LogLine = $line
                    }

                    # שמירה לקובץ CSV מרכזי
                    $obj | Export-Csv -Path $OutputFile -NoTypeInformation -Append

                    # שמירה בפרמטר פנימי
                    $Global:PortConflicts += $obj

                    Write-Host "$time ⚠ Address already in use on $($env:COMPUTERNAME): $line" -ForegroundColor Red
                }
            }
        }

        Write-Host "🟢 ממתין לאירועים... (Ctrl+C לעצירה)"
        while ($true) { Start-Sleep 1 }
    } -ArgumentList $LogPath.FullName, $OutputFile
}

# --- הפעלה עבור כל שרת ברשימה ---
foreach ($server in $RemoteComputers) {
    $LatestLog = Get-RemoteLatestLog -Computer $server -Folder $RemoteLogFolder
    if ($LatestLog) {
        Monitor-HyperRemote -Computer $server -LogPath $LatestLog -OutputFile $OutputLogFile
    } else {
        Write-Host "❌ לא נמצא קובץ לוג Hyper בשרת $server"
    }
}
