param(
    [string[]]$RemoteComputers = @("Server1","Server2"),
    [string]$RemoteLogFolder = "C:\ProgramData\Tableau\Tableau Server\data\tabsvc\logs\hyper",
    [string]$OutputLogFile = "C:\Temp\HyperPortConflicts_AllServers.csv"
)

# משתנה גלובלי לשמירת כל ההתנגשויות במכונה המקומית
$Global:PortConflicts = @()

# פונקציה לקבלת הקובץ האחרון של Hyper מהיום בשרת מרוחק
function Get-RemoteLatestLog {
    param($Computer, $Folder)
    try {
        $session = New-PSSession -ComputerName $Computer -ErrorAction Stop
    } catch {
        Write-Host "❌ לא ניתן ליצור סשן לשרת $($Computer): $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }

    try {
        $logPath = Invoke-Command -Session $session -ScriptBlock {
            param($FolderRemote)
            $today = (Get-Date).Date
            $log = Get-ChildItem -Path $FolderRemote -Filter "hyper_0_????_??_??_??_??_??.txt" -ErrorAction SilentlyContinue |
                   Where-Object { $_.LastWriteTime.Date -eq $today } |
                   Sort-Object LastWriteTime -Descending |
                   Select-Object -First 1
            if ($log) { return $log.FullName } else { return $null }
        } -ArgumentList $Folder
    } catch {
        Write-Host "❌ שגיאה בקריאת קבצים בשרת $($Computer): $($_.Exception.Message)" -ForegroundColor Red
        Remove-PSSession $session
        return $null
    }

    Remove-PSSession $session
    return $logPath
}

# פונקציה לניטור Hyper על שרת מרוחק
function Monitor-HyperRemote {
    param($Computer, $LogPath, $OutputFile)

    if (-not $LogPath) {
        Write-Host "❌ לא נמצא קובץ Hyper מהיום על $($Computer)"
        return
    }

    $logFileName = Split-Path $LogPath -Leaf
    Write-Host "🟢 מתחיל ניטור Hyper בזמן אמת על $($Computer): $logFileName ..."

    # הפעלה במקביל עם Start-Job
    Start-Job -Name "Monitor_$Computer" -ScriptBlock {
        param($ServerName, $LogPath, $OutputFile)

        try {
            $session = New-PSSession -ComputerName $ServerName -ErrorAction Stop
        } catch {
            Write-Host "❌ לא ניתן ליצור סשן בתוך Job לשרת $($ServerName): $($_.Exception.Message)" -ForegroundColor Red
            return
        }

        Invoke-Command -Session $session -ScriptBlock {
            param($FullPath)
            $fsw = New-Object System.IO.FileSystemWatcher
            $fsw.Path = Split-Path $FullPath
            $fsw.Filter = Split-Path $FullPath -Leaf
            $fsw.EnableRaisingEvents = $true
            $fsw.NotifyFilter = [System.IO.NotifyFilters]'LastWrite'

            Register-ObjectEvent $fsw Changed -Action {
                $lines = Get-Content $FullPath -Tail 5
                foreach ($line in $lines) {
                    if ($line -match "Address already in use") {
                        $time = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                        Write-Output "$time|$env:COMPUTERNAME|$line"
                    }
                }
            }

            while ($true) { Start-Sleep 1 }
        } -ArgumentList $LogPath | ForEach-Object {
            $parts = $_ -split "\|"
            $obj = [PSCustomObject]@{
                Time    = $parts[0]
                Server  = $parts[1]
                LogLine = $parts[2]
            }

            # שמירה ל-CSV מהמכונה המקומית
            $obj | Export-Csv -Path $OutputFile -NoTypeInformation -Append
            # שמירה בפרמטר פנימי
            $Global:PortConflicts += $obj
            Write-Host "$($obj.Time) ⚠ Address already in use on $($obj.Server): $($obj.LogLine)" -ForegroundColor Red
        }

        Remove-PSSession $session
    } -ArgumentList $Computer, $LogPath, $OutputFile
}

# --- הפעלה לכל השרתים ---
foreach ($server in $RemoteComputers) {
    $LatestLog = Get-RemoteLatestLog -Computer $server -Folder $RemoteLogFolder
    Monitor-HyperRemote -Computer $server -LogPath $LatestLog -OutputFile $OutputLogFile
}

Write-Host "🟢 ניטור התחיל לכל השרתים. בדוק את הקובץ $OutputLogFile להתראות."
