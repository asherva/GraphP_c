#<
✅ תכונות הסקריפט

מזהה קובץ Hyper מהיום בלבד

תואם לפורמט hyper_0_YYYY_MM_DD_hh_mm_ss.txt

מאפשר ניטור מספר שרתים מרוחקים במקביל

מגיב כמעט בזמן אמת ל‑Address already in use

שומר את ההתנגשות ל‑CSV מרכזי ופרמטר פנימי $Global:PortConflicts

מודפס התראה בזמן אמת למסוף
>#

param(
    [string[]]$RemoteComputers = @("Server1","Server2"),  # רשימת שרתים מרוחקים
    [string]$RemoteLogFolder = "C:\ProgramData\Tableau\Tableau Server\data\tabsvc\logs\hyper",
    [string]$OutputLogFile = "C:\Temp\HyperPortConflicts_AllServers.csv"
)

# משתנה גלובלי לשמירת כל ההתנגשויות
$Global:PortConflicts = @()

# פונקציה לקבלת הקובץ האחרון של Hyper מהיום בשרת מרוחק
function Get-RemoteLatestLog {
    param($Computer, $Folder)
    $session = New-PSSession -ComputerName $Computer
    $logPath = Invoke-Command -Session $session -ScriptBlock {
        param($FolderRemote)
        $today = (Get-Date).Date
        $log = Get-ChildItem -Path $FolderRemote -Filter "hyper_0_????_??_??_??_??_??.txt" |
               Where-Object { $_.LastWriteTime.Date -eq $today } |
               Sort-Object LastWriteTime -Descending |
               Select-Object -First 1
        return $log.FullName
    } -ArgumentList $Folder
    Remove-PSSession $session
    return $logPath
}

# פונקציה לניטור Hyper על שרת מרוחק
function Monitor-HyperRemote {
    param($Computer, $LogPath, $OutputFile)
    
    if (-not $LogPath) {
        Write-Host "❌ לא נמצא קובץ Hyper מהיום על $Computer"
        return
    }

    $logFileName = Split-Path $LogPath -Leaf
    Write-Host "🟢 ניטור Hyper בזמן אמת על $Computer: $logFileName ..."

    $session = New-PSSession -ComputerName $Computer
    Invoke-Command -Session $session -ScriptBlock {
        param($FullPath, $OutputFile)
        
        $fsw = New-Object System.IO.FileSystemWatcher
        $fsw.Path = Split-Path $FullPath
        $fsw.Filter = Split-Path $FullPath -Leaf
        $fsw.EnableRaisingEvents = $true
        $fsw.NotifyFilter = [System.IO.NotifyFilters]'LastWrite'

        Register-ObjectEvent $fsw Changed -Action {
            $lines = Get-Content $FullPath -Tail 5
            foreach ($line in $lines) {
                if ($line -match "Address already in use") {
                    $time = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                    $obj = [PSCustomObject]@{
                        Time    = $time
                        Server  = $env:COMPUTERNAME
                        LogLine = $line
                    }

                    # שמירה לקובץ CSV מרכזי
                    $obj | Export-Csv -Path $OutputFile -NoTypeInformation -Append

                    # שמירה בפרמטר פנימי
                    $Global:PortConflicts += $obj

                    Write-Host "$time ⚠ Address already in use on $($env:COMPUTERNAME): $line" -ForegroundColor Red
                }
            }
        }

        Write-Host "🟢 ממתין לאירועים... (Ctrl+C לעצירה)"
        while ($true) { Start-Sleep 1 }
    } -ArgumentList $LogPath, $OutputFile
}

# --- הפעלה עבור כל שרת ברשימה ---
foreach ($server in $RemoteComputers) {
    $LatestLog = Get-RemoteLatestLog -Computer $server -Folder $RemoteLogFolder
    Monitor-HyperRemote -Computer $server -LogPath $LatestLog -OutputFile $OutputLogFile
}
