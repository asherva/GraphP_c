# בדיקת דיסק C ו-D על שרת מרוחק בשם SERVER01
Invoke-Command -ComputerName SERVER01 -ScriptBlock {
    Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:' OR DeviceID='D:'" |
    Select-Object DeviceID,
        @{Name='Free(GB)';Expression={[math]::Round($_.FreeSpace/1GB,2)}},
        @{Name='Total(GB)';Expression={[math]::Round($_.Size/1GB,2)}},
        @{Name='FreePercent';Expression={[math]::Round(($_.FreeSpace/$_.Size)*100,2)}}
}
def graphql_query(token, site_id, query):
    url = f"{SERVER}/api/metadata/graphql"
    headers = {
        "X-Tableau-Auth": token,
        "X-Tableau-Site-Id": site_id,
        "Content-Type": "application/json"
    }
    r = requests.post(url, json={"query": query}, headers=headers, verify=VERIFY_SSL)
    r.raise_for_status()
    return r.json()

def process_site(site, token):
    site_id = site["id"]
    site_name = site["name"]

    print(f"🔍 סורק את האתר: {site_name}")

    query = """
    {
      workbooks {
        name
        datasources {
          name
          upstreamTables {
            name
            schema
            connectionType
          }
          ... on CustomSQLTable {
            query
          }
        }
      }
    }
    """

    try:
        data = graphql_query(token, site_id, query)
        rows = []
        if "data" in data and "workbooks" in data["data"]:
            for wb in data["data"]["workbooks"]:
                wb_name = wb["name"]
                for ds in wb.get("datasources", []):
                    ds_name = ds["name"]
                    sql_text = ds.get("query", None)  # custom SQL
                    for tbl in ds.get("upstreamTables", []):
                        rows.append({
                            "Site": site_name,
                            "Workbook": wb_name,
                            "DataSource": ds_name,
                            "Table": tbl["name"],
                            "Schema": tbl.get("schema", ""),
                            "ConnectionType": tbl.get("connectionType", ""),
                            "SQL": sql_text
                        })
        return rows
    except Exception as e:
        print(f"⚠️ שגיאה בסריקת האתר {site_name}: {e}")
        return []

# ===== התחברות =====
token, default_site_id, user_id = signin()
sites = get_sites(token)

# ===== ריצה מקבילית =====
all_rows = []
with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
    future_to_site = {executor.submit(process_site, site, token): site for site in sites}
    for future in as_completed(future_to_site):
        site_rows = future.result()
        all_rows.extend(site_rows)

# ===== שמירה לאקסל =====
df = pd.DataFrame(all_rows)
df.to_excel("tableau_all_sites_sql_metadata.xlsx", index=False)

print("✅ קובץ נוצר: tableau_all_sites_sql_metadata.xlsx")
